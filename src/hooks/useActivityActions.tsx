
import { useCallback } from "react"
import { supabase } from "@/integrations/supabase/client"
import { useToast } from "@/hooks/use-toast"
import type { Activity } from "@/types/activity"

export function useActivityActions() {
  const { toast } = useToast()

  const fetchActivities = useCallback(async () => {
    console.log('üîÑ D√©but de la r√©cup√©ration des activit√©s...')
    try {
      const { data, error } = await supabase
        .from('activities')
        .select('*')
        .order('name')

      console.log('üìä Donn√©es r√©cup√©r√©es:', data)
      console.log('‚ùå Erreur √©ventuelle:', error)

      if (error) {
        console.error('‚ùå Erreur Supabase:', error)
        throw error
      }
      
      console.log('‚úÖ Nombre d\'activit√©s r√©cup√©r√©es:', data?.length || 0)
      return data || []
    } catch (error: unknown) {
      console.error('üí• Erreur lors du chargement des activit√©s:', error)
      toast({
        title: "Erreur",
        description: "Impossible de charger les activit√©s.",
        variant: "destructive",
      })
      return []
    }
  }, [toast])

  const handleDelete = useCallback(async (id: string) => {
    const activityId = parseInt(id)
    console.log('üóëÔ∏è Suppression de l\'activit√© ID:', activityId)
    
    try {
      const { error } = await supabase
        .from('activities')
        .delete()
        .eq('id', activityId)

      if (error) throw error

      toast({
        title: "Activit√© supprim√©e",
        description: "L'activit√© a √©t√© supprim√©e avec succ√®s.",
      })

      return true
    } catch (error: unknown) {
      console.error('‚ùå Erreur lors de la suppression:', error)
      toast({
        title: "Erreur",
        description: "Impossible de supprimer l'activit√©.",
        variant: "destructive",
      })
      return false
    }
  }, [toast])

  return {
    fetchActivities,
    handleDelete
  }
}
